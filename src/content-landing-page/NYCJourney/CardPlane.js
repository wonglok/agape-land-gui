/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from 'react'
import {
  Center,
  Text,
  Text3D,
  useEnvironment,
  useGLTF,
  useTexture,
} from '@react-three/drei'
import { RGBELoader } from 'three140/examples/jsm/loaders/RGBELoader'
import { useFrame, useThree } from '@react-three/fiber'
// import { VersionFlowerSim } from '@/vfx-library/SharedCommons/FlowerSim'
import { Core } from '../Core/Core'
import {} from './FlowerSim'
import { useCore } from '@/lib/useCore'

/*
import daysFont from '@/../public/fonts/Days/Days_Regular.json'
function Agape() {
  return (
    <group
      position={[0, 0.0, 0]}
      rotation={[0 - Math.PI * 0.5, 0, 0]}
      scale={1}
    >
      <Center>
        <Text3D
          bevelEnabled
          bevelOffset={-0.01}
          bevelSize={0.05}
          bevelSegments={5}
          font={daysFont}
          letterSpacing={0.1}
        >
          {`AGAPE`}
          <meshPhysicalMaterial
            transmission={1.5}
            ior={1.15}
            thickness={5.5}
            emissive={'#F08BDC'}
            emissiveIntensity={1}
            roughness={1.0}
            metalness={0}
            color={'#F08BDC'}
          ></meshPhysicalMaterial>
        </Text3D>
      </Center>
    </group>
  )
}
*/
export function CardBG({ envMap, ...props }) {
  // const { color } = useControls({ color: '#ffffff' })

  const { nodes, materials } = useGLTF('/scene/2022-11-28-NYC/bg-card.glb')
  //materials['Material.001']
  return (
    <group {...props} dispose={null}>
      <group position={[-0.12, 0, -1.313]}>
        <mesh castShadow receiveShadow geometry={nodes.Cube002_1.geometry}>
          <meshPhysicalMaterial
            transmission={1}
            thickness={1.0}
            roughness={0.54}
          ></meshPhysicalMaterial>
        </mesh>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube002_2.geometry}
          // material={materials['Material.002']}
        >
          <meshStandardMaterial
            color={`#656e6f`}
            roughness={0.35}
            metalness={1}
            envMap={envMap}
          ></meshStandardMaterial>
        </mesh>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube002_3.geometry}
          material={materials['Material.004']}
        />
      </group>
    </group>
  )
}

let Cache = new Map()

export function CardPlane({
  myTime = { current: 0 },
  getVisible = () => {},
  data = false,
  title = '',
  desc = '',
  imageURL = '/img/logo.svg',
  titleSize = 1,
  descSize = 1,
  mixer,
  enableRenderImage = true,
  onNext = () => {},
  proxy,
  ...props
}) {
  const { nodes, materials } = useGLTF(
    `/scene/2022-11-28-NYC/yo-cards-animation1.glb`
  )
  let ref = useRef()
  // public

  let tex2 = useEnvironment({ files: `/hdr/greenwich_park_02_1k.hdr` })
  // let prom = false

  // if (Cache.has(`/hdr/greenwich_park_02_1k.hdr`)) {
  //   prom = Cache.get(`/hdr/greenwich_park_02_1k.hdr`)
  // } else {
  //   prom = loader.loadAsync(`/hdr/greenwich_park_02_1k.hdr`)
  //   Cache.set(`/hdr/greenwich_park_02_1k.hdr`, prom)
  // }

  // let [tex2, setTex] = useState()

  // prom.then((tex) => {
  //   // loader.loadAsync(`/hdr/studio_small_08_1k.hdr`).then((tex) => {
  //   tex.mapping = EquirectangularReflectionMapping
  //   // scene.background = tex

  //   for (let kn in materials) {
  //     materials[kn].envMapIntensity = 30
  //   }

  //   setTex(tex)
  // })

  let tMap = useTexture(imageURL)
  tMap.flipY = false
  // materials['Bar_cropped.003'] = new MeshStandardMaterial({ map: tMap })

  useFrame(({ clock }) => {
    //
    let t = clock.getElapsedTime()
    if (ref.current) {
      ref.current.rotation.x = Math.sin(t) * 0.15
      ref.current.rotation.y = Math.cos(t) * 0.15
    }

    if (ref.current) {
      //
      if (getVisible()) {
        ref.current.visible = true
      } else {
        ref.current.visible = false
      }
    }
  })

  let core = useCore()
  let gl = useThree((s) => s.gl)
  return (
    <group ref={ref} scale={0.2} {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.XMLID_222_003.geometry}
        material={materials['SVGMat.005']}
        position={[0.37, -1.94, 0.11]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={2.49}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Text009.geometry}
        material={materials['Material.006']}
        position={[-0.18, -1.93, 0.12]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={0.42}
        onClick={() => {
          //
          onNext()
        }}
      />

      <CardBG envMap={tex2}></CardBG>
      {/* <mesh
        castShadow
        receiveShadow
        geometry={nodes.Path003.geometry}
        material={materials['Material.009']}
        position={[0.16, 0.03, -0.21]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={21.03}
      />
       */}
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Curve011.geometry}
        material={materials['Material.008']}
        position={[-0.11, -1.92, 0.02]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={27.62}
        onClick={() => {
          //
          onNext()
        }}
      />

      <group scale={0.5} position={[-1.5, -1, 0]}>
        <Text
          fontSize={1 * titleSize}
          anchorX={'left'}
          anchorY={'bottom-baseline'}
          textAlign={'left'}
          color={'#00ffff'}
          position-y={1}
          font={`/font/Rajdhani-Bold.ttf`}
          position-z={0.1}
          maxWidth={5}
        >
          {title}
        </Text>

        <Text
          color={'#00ffff'}
          fontSize={1 * descSize}
          anchorX={'left'}
          anchorY={'middle'}
          textAlign={'left'}
          font={`/font/Rajdhani-Medium.ttf`}
          position-z={0.1}
          maxWidth={5}
        >
          {desc}
        </Text>
      </group>

      {/* <mesh
        castShadow
        receiveShadow
        geometry={nodes.Text010.geometry}
        material={materials['Material.010']}
        position={[-0.11, -1.07, 0.01]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={0.57}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Text011.geometry}
        material={materials['Material.011']}
        position={[-1.1, -0.47, 0.01]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={0.63}
      /> */}

      {enableRenderImage ? (
        <group
          position={[-0.12, 1.53, -0.1]}
          rotation={[Math.PI / 2, 0, 0]}
          scale={3.02}
        >
          <group position={[0, 0, 0]} scale={[0.05, 0.0, 0.05]}>
            <flowerSim args={[{ gl, core }]}></flowerSim>
          </group>
        </group>
      ) : (
        <>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Bar_cropped003.geometry}
            // material={materials['Bar_cropped.003']}
            position={[-0.12, 1.53, -0.1]}
            rotation={[Math.PI / 2, 0, 0]}
            scale={3.02}
          >
            <meshStandardMaterial
              envMap={tex2}
              metalness={0.4}
              roughness={0.2}
              envMapIntensity={1}
              transparent={true}
              map={tMap}
              emissiveMap={tMap}
            ></meshStandardMaterial>
          </mesh>
        </>
      )}

      {/*  */}
    </group>
  )
}

// useGLTF.preload('/yo-cards-animation1.glb')
