/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { Suspense, useRef } from 'react'
import {
  Box,
  Center,
  Environment,
  Hud,
  Loader,
  MeshTransmissionMaterial,
  Text3D,
  useFBX,
  useGLTF,
  useTexture,
} from '@react-three/drei'
import { Canvas, createPortal, useFrame, useThree } from '@react-three/fiber'
import { useWheel } from '@use-gesture/react'
// import { FrontSide } from 'three'
import { clone } from 'three/examples/jsm/utils/SkeletonUtils'
import { Fog, sRGBEncoding } from 'three'
import { useState } from 'react'
import { AnimationMixer } from 'three'
import { Vector3 } from 'three'
import {
  Bloom,
  ChromaticAberration,
  DepthOfField,
  EffectComposer,
} from '@react-three/postprocessing'
import { useEffect } from 'react'
import { EquirectangularReflectionMapping } from 'three'
import font from '../../public/fonts/Days/Days_Regular.json'
// import { clone } from 'three/examples/jsm/utils/SkeletonUtils'

function Smaller({
  visible = true,
  url = `/rpm/white-armor-lok.glb`,
  gesture = `/rpm/rpm-actions-emoji/yes.fbx`,
}) {
  const glb = useGLTF(url)

  let gl = useThree((s) => s.gl)
  let camera = useThree((s) => s.camera)
  let sc = clone(glb.scene)
  gl.compile(sc, camera)

  sc.traverse((it) => {
    it.frustumCulled = false
  })

  let {
    animations: [firstAnim],
  } = useFBX(gesture)

  let mixer = new AnimationMixer(sc)
  mixer.clipAction(firstAnim).play()

  let ref = useRef()
  let headCenter = new Vector3()

  useFrame((st, dt) => {
    mixer.update(dt)

    if (visible) {
      sc.getObjectByName('Head').getWorldPosition(headCenter)

      st.camera.position.copy(headCenter)
      st.camera.position.y += 0.045 + 0.04
      st.camera.position.x += 0.025 + 0.01
      st.camera.lookAt(
        st.camera.position.x + 0.01,
        st.camera.position.y - 0.025,
        st.camera.position.z - 0.1
      )
    }
  })

  return (
    <group visible={visible} rotation={[0, 0.0, 0]} ref={ref}>
      <primitive object={sc}></primitive>
    </group>
  )
}

function CameraZoom() {
  let scene = useThree((s) => s.scene)
  let camera = useThree((s) => s.camera)

  let texture = useTexture(`/places/yo/ma-galaxy.jpg`)
  texture.encoding = sRGBEncoding
  texture.mapping = EquirectangularReflectionMapping

  scene.background = texture
  let move = 1

  useEffect(() => {}, [])

  let [tick, setTick] = useState(0)
  useFrame(({}) => {
    //
    camera.near = 0.01
    camera.far = 2
    camera.fov = move * 90

    camera.updateProjectionMatrix()
    camera.position.z = 0.0
    camera.position.z += move

    move -= 1 / 600

    if (move <= 0.18) {
      move = 1
      setTick((s) => s + 1)
    }
  })

  return (
    <>
      <group
        position={[0.0, 1.505 - 0.02, 0.4]}
        rotation={[-0.45, 0, 0]}
        scale={0.055}
      >
        <Center>
          <Text3D
            bevelEnabled
            bevelThickness={0.2}
            bevelSegments={5}
            bevelSize={0.06}
            bevelOffset={0.001}
            font={font}
            size={1.25}
          >
            {tick % 5 === 0.0 && `SALUTE!`}
            {tick % 5 === 1.0 && `AVATAR`}
            {tick % 5 === 2.0 && `NEW YOU`}
            {tick % 5 === 3.0 && `3D World`}
            {tick % 5 === 4.0 && `Metadata`}

            {/*  */}
            {/*  */}
            {/*  */}
            <MeshTransmissionMaterial
              {...{
                transmissionSampler: true,
                samples: 5,
                // resolution: 512,
                transmission: 1,
                roughness: 0.3,
                thickness: 2.5,
                ior: 1.5,
                chromaticAberration: 0.26,
                anisotropy: 0.3,
                distortion: 0.3,
                distortionScale: 0.3,
                temporalDistortion: 0.5,
                attenuationDistance: 0.5,
                attenuationColor: '#ffffff',
                color: '#ffffff',
              }}
              // background={texture}
            ></MeshTransmissionMaterial>
          </Text3D>
        </Center>
      </group>
      <group position={[0.0, 0, 0.4]} rotation={[-0.4, 0, 0]} scale={0.055}>
        <Center>
          <Text3D
            bevelEnabled
            bevelThickness={0.2}
            bevelSegments={5}
            bevelSize={0.06}
            bevelOffset={0.001}
            font={font}
            size={1.5}
          >
            {`Wekcine to AGAPE`}
            <MeshTransmissionMaterial
              {...{
                transmissionSampler: true,
                samples: 5,
                // resolution: 512,
                transmission: 1,
                roughness: 0.3,
                thickness: 2.5,
                ior: 1.5,
                chromaticAberration: 0.26,
                anisotropy: 0.3,
                distortion: 0.3,
                distortionScale: 0.3,
                temporalDistortion: 0.5,
                attenuationDistance: 0.5,
                attenuationColor: '#ffffff',
                color: '#ffffff',
              }}
              // background={texture}
            ></MeshTransmissionMaterial>
          </Text3D>
        </Center>
      </group>
      <group>
        <group>
          <Smaller
            visible={tick % 5 === 0.0}
            gesture={`/rpm/rpm-actions-emoji/salute.fbx`}
            url={`/scene/2023-01-07-skycity/lok-dune.glb`}
          ></Smaller>
        </group>
        <group>
          <Smaller
            visible={tick % 5 === 1.0}
            gesture={`/rpm/rpm-actions-locomotion/swim-float.fbx`}
            url={`/scene/2023-01-07-skycity/lok-jacket.glb`}
          ></Smaller>
        </group>
        <group>
          <Smaller
            visible={tick % 5 === 2.0}
            gesture={`/rpm/rpm-actions-emoji/yes.fbx`}
            url={`/scene/2023-01-07-skycity/lok-groom.glb`}
          ></Smaller>
        </group>
        <group>
          <Smaller
            visible={tick % 5 === 3.0}
            gesture={`/rpm/rpm-actions-emoji/bored.fbx`}
            url={`/scene/2023-01-07-skycity/loklok-space-ava.glb`}
          ></Smaller>
        </group>
        <group>
          <Smaller
            visible={tick % 5 === 4.0}
            gesture={`/rpm/rpm-actions-emoji/stand-idle.fbx`}
            url={`/scene/2023-01-07-skycity/lok-school.glb`}
          ></Smaller>
        </group>
      </group>
    </>
  )
}

export function ZoomRPM() {
  let camera = useThree((s) => s.camera)
  return (
    <>
      {createPortal(
        <group scale={0.1} rotation={[0.2, 0, 0]} position={[0, 0, -0.5]}>
          <Center>
            <Text3D
              bevelEnabled
              bevelThickness={0.2}
              bevelSegments={5}
              bevelSize={0.06}
              bevelOffset={0.001}
              font={font}
              size={1.5}
            >
              {`Exploring`}

              <MeshTransmissionMaterial
                {...{
                  transmissionSampler: true,
                  samples: 5,
                  // resolution: 512,
                  transmission: 1,
                  roughness: 0.3,
                  thickness: 2.5,
                  ior: 1.5,
                  chromaticAberration: 0.26,
                  anisotropy: 0.3,
                  distortion: 0.3,
                  distortionScale: 0.3,
                  temporalDistortion: 0.5,
                  attenuationDistance: 0.5,
                  attenuationColor: '#ffffff',
                  color: '#ffffff',
                }}
                // background={texture}
              ></MeshTransmissionMaterial>
            </Text3D>
          </Center>
        </group>,
        camera
      )}
      <primitive object={camera}></primitive>9{' '}
    </>
  )
}

export function Zoom() {
  return (
    <>
      <Canvas gl={{ antialias: true }}>
        {/*  */}
        <Environment preset='lobby' blur={0.3}></Environment>

        {/*  */}
        {/* <ZoomRPM></ZoomRPM> */}

        <CameraZoom></CameraZoom>

        {/*  */}
        <EffectComposer disableNormalPass>
          <Bloom luminanceThreshold={0.3} intensity={1.0} mipmapBlur></Bloom>
          <ChromaticAberration offset={[0.0005, 0.0]}></ChromaticAberration>
        </EffectComposer>
      </Canvas>
    </>
  )
}
